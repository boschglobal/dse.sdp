---
version: '3'

vars:
  PLATFORM_ARCH: linux-amd64
  OUTDIR: 'out'
  SIMDIR: 'sim'

includes:
  dse.fmi-v1.1.15:
    taskfile: https://raw.githubusercontent.com/boschglobal/dse.fmi/refs/tags/v1.1.15/Taskfile.yml
    dir: '{{.OUTDIR}}/{{.SIMDIR}}'
    vars:
      FMI_IMAGE: ghcr.io/boschglobal/dse-fmi
      FMI_TAG: 1.1.15
      SIM: '{{.SIMDIR}}'
      ENTRYWORKDIR: '{{.PWD}}/{{.OUTDIR}}'

tasks:

  default:
    cmds:
      - task: build

  build:
    dir: '{{.OUTDIR}}'
    label: build
    deps:
      - task: build-models
    cmds:
      - mkdir -p '{{.SIMDIR}}/data'
      - cp {{.PWD}}/simulation.yaml '{{.SIMDIR}}/data/simulation.yaml'
    sources:
      - '{{.PWD}}/simulation.yaml'
    generates:
      - '{{.SIMDIR}}/data/simulation.yaml'

  build-models:
    label: build-models
    deps:
      - task: model-linear
      - task: model-input

  model-input:
    dir: '{{.OUTDIR}}'
    label: sim:model:input
    vars:
      REPO: https://github.com/boschglobal/dse.modelc
      TAG: 2.1.15
      MODEL: 'input'
      PATH: 'model/input'
      URL: '{{.REPO}}/releases/download/v{{.TAG}}/ModelC-{{.TAG}}-{{.PLATFORM_ARCH}}.zip'
      MODEL_SO_ZIPPATH: 'ModelC-{{.TAG}}-{{.PLATFORM_ARCH}}/examples/csv/lib/libcsv.so'
      MODEL_SO_FILE: '{{.PATH}}/lib/libcsv.so'
    deps:
      - task: download-file
        vars:
          URL: '{{.URL}}'
          FILE: 'downloads/{{base .URL}}'
    cmds:
      - echo "SIM Model input -> {{.SIMDIR}}/{{.PATH}}"
      - mkdir -p '{{.SIMDIR}}/{{.PATH}}/data'
      - cp {{.PWD}}/csv_input/input__value_set.csv '{{.SIMDIR}}/{{.PATH}}/data/input.csv'
      - cp {{.PWD}}/input__model.yaml '{{.SIMDIR}}/{{.PATH}}/data/model.yaml'
      - cp {{.PWD}}/input__signalgroup.yaml '{{.SIMDIR}}/{{.PATH}}/data/signalgroup.yaml'
      - task: unzip-file
        vars:
          ZIP: 'downloads/{{base .URL}}'
          ZIPFILE: '{{.MODEL_SO_ZIPPATH}}'
          FILE: '{{.SIMDIR}}/{{.MODEL_SO_FILE}}'
    sources:
      - '{{.PWD}}/csv_input/input__value_set.csv'
      - '{{.PWD}}/input__model.yaml'
      - '{{.PWD}}/input__signalgroup.yaml'
    generates:
      - 'downloads/{{base .URL}}'
      - '{{.SIMDIR}}/{{.MODEL_SO_FILE}}'
      - '{{.SIMDIR}}/{{.PATH}}/data/input.csv'
      - '{{.SIMDIR}}/{{.PATH}}/data/model.yaml'
      - '{{.SIMDIR}}/{{.PATH}}/data/signalgroup.yaml'

  model-linear:
    dir: '{{.OUTDIR}}'
    label: sim:model:linear
    vars:
      REPO: https://github.com/boschglobal/dse.fmi
      TAG: 1.1.15
      MODEL: 'linear'
      PATH: 'model/linear'
      URL: '{{.REPO}}/releases/download/v{{.TAG}}/Fmi-{{.TAG}}-{{.PLATFORM_ARCH}}.zip'
      FMU_ZIPFILE: 'Fmi-{{.TAG}}-{{.PLATFORM_ARCH}}/examples/fmu/linear/fmi2/linear.fmu'
      MCL_SO_ZIPPATH: 'Fmi-{{.TAG}}-{{.PLATFORM_ARCH}}/fmimcl/lib/libfmimcl.so'
      MCL_SO_FILE: '{{.PATH}}/lib/libfmimcl.so'
    deps:
      - task: fmu-fetch-extract
        vars:
          URL: '{{.URL}}'
          FMU_ZIPFILE: '{{.FMU_ZIPFILE}}'
          FMU_DIR: '{{.SIMDIR}}/{{.PATH}}/fmu'
    cmds:
      - echo "SIM Model linear -> {{.SIMDIR}}/{{.PATH}}"
      - task: unzip-file
        vars:
          ZIP: 'downloads/{{base .URL}}'
          ZIPFILE: '{{.MCL_SO_ZIPPATH}}'
          FILE: '{{.SIMDIR}}/{{.MCL_SO_FILE}}'
      - task: dse.fmi-v1.1.15:generate-fmimcl
        vars:
          FMU_DIR: '{{.PATH}}/fmu'
          OUT_DIR: '{{.PATH}}/data'
          MCL_PATH: '{{.MCL_SO_FILE}}'
    sources:
      - 'fmus/{{base .FMU_ZIPFILE}}'
    generates:
      - '{{.SIMDIR}}/{{.MCL_SO_FILE}}'

  fmu-fetch-extract:
    dir: '{{.OUTDIR}}'
    run: when_changed
    label: dse:fmu-fetch-extract:{{.URL}}-{{.FMU_ZIPFILE}}-{{.FMU_DIR}}
    vars:
        # Required variables.
        URL: '{{.URL}}'
        FMU_ZIPFILE: '{{.FMU_ZIPFILE}}'
        FMU_DIR: '{{.FMU_DIR}}'
        # Intermediate (calculated) variables.
        DOWNLOAD_FILE: 'downloads/{{base .URL}}'
        FMU_FILE: 'fmus/{{base .FMU_ZIPFILE}}'
    deps:
      - task: download-file
        vars:
          URL: '{{.URL}}'
          FILE: '{{.DOWNLOAD_FILE}}'
    cmds:
      - echo "FMU Fetch/Extract {{.URL}}/{{.FMU_ZIPFILE}} -> {{.FMU_DIR}}"
      - task: unzip-file
        vars:
          ZIP: '{{.DOWNLOAD_FILE}}'
          ZIPFILE: '{{.FMU_ZIPFILE}}'
          FILE: '{{.FMU_FILE}}'
      - task: unzip-dir
        vars:
          ZIP: '{{.FMU_FILE}}'
          DIR: '{{.FMU_DIR}}'
    sources:
      - '{{.DOWNLOAD_FILE}}'
    generates:
      - '{{.FMU_FILE}}'
      - '{{.FMU_DIR}}/**'

  unzip-file:
    dir: '{{.OUTDIR}}'
    run: when_changed
    label: dse:unzip-file:{{.ZIPFILE}}-{{.FILEPATH}}
    vars:
      ZIP : '{{.ZIP}}'
      ZIPFILE : '{{.ZIPFILE}}'
      FILE: '{{.FILE}}'
    cmds:
      - echo "UNZIP FILE {{.ZIP}}/{{.ZIPFILE}} -> {{.FILE}}"
      - mkdir -p $(dirname {{.FILE}})
      - unzip -o -j {{.ZIP}} {{.ZIPFILE}} -d $(dirname {{.FILE}})
      - mv -n $(dirname {{.FILE}})/$(basename {{.ZIPFILE}}) {{.FILE}}
    sources:
      - '{{.ZIP}}'
    generates:
      - '{{.FILE}}'

  unzip-dir:
    dir: '{{.OUTDIR}}'
    run: when_changed
    label: dse:unzip-dir:{{.ZIPFILE}}-{{.DIR}}
    vars:
      ZIP : '{{.ZIP}}'
      ZIPDIR : '{{if .ZIPDIR}}"{{.ZIPDIR}}/*"{{else}}{{end}}'
      DIR: '{{.DIR}}'
      JUNKDIR: '{{if .ZIPDIR}}-j{{else}}{{end}}'
    cmds:
      - echo "UNZIP DIR {{.ZIP}}/{{.ZIPDIR}} -> {{.DIR}}"
      - mkdir -p {{.DIR}}
      - unzip -o {{.JUNKDIR}} {{.ZIP}} {{.ZIPDIR}} -d {{.DIR}}
    sources:
      - '{{.ZIP}}'
    generates:
      - '{{.DIR}}/**'

  download-file:
    dir: '{{.OUTDIR}}'
    run: when_changed
    label: dse:download-file:{{.URL}}-{{.FILE}}
    vars:
        URL: '{{.URL}}'
        FILE: '{{.FILE}}'
        AUTH: '{{if all .USER .TOKEN}}-u {{.USER}}:{{.TOKEN}}{{else}}{{end}}'
    cmds:
      - echo "CURL {{.URL}} -> {{.FILE}}"
      - mkdir -p $(dirname {{.FILE}})
      - curl --retry 5 {{.AUTH}} -fL {{.URL}} -o {{.FILE}}
    generates:
      - '{{.FILE}}'
    status:
      - test -f {{.FILE}}

  clean:
    cmds:
      - find ./out -mindepth 1 -maxdepth 1 ! -name downloads -exec rm -rf {} +

  cleanall:
    cmds:
      - rm -rf ./out
